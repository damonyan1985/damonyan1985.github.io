{"version":3,"sources":["util/HTTPUtil.js","App.js","serviceWorker.js","index.js"],"names":["HTTPUtil","url","fetch","method","headers","res","text","result","console","log","formData","callback","body","mode","then","response","catch","e","status","JSON","stringify","App","props","state","title","test","get","jsonContent","blogObj","parse","this","setState","author","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8SAEqBA,G,+IACHC,G,iGAECC,MAAMD,EAAK,CAC1BE,OAAQ,MACCC,QAAS,CACR,OAAU,mBACP,eAAgB,sB,cAJ1BC,E,gBAQeA,EAAIC,O,cAAnBC,E,OACJC,QAAQC,IAAI,YAAYF,G,kBACjBA,G,kCAEEC,QAAQC,IAAI,uBAAuB,EAAvB,I,iCAGZ,M,+IAGMR,EAAKS,EAAUC,GAC/BT,MAAMD,EAAI,CACAE,OAAQ,OACRS,KAAMF,EACNG,KAAM,YAIPC,KAAK,SAACC,GACR,OAAOA,EAAST,SACdQ,KAAK,SAACR,GACRK,EAASL,KACPU,MAAM,SAACC,GACTT,QAAQC,IAAI,SAASQ,O,mEAIXhB,EAAKS,G,iGAEIR,MAAMD,EAAK,CACvBE,OAAQ,OACRS,KAAMF,EACNG,KAAM,Y,cAHNR,E,OASbG,QAAQC,IAAI,mBAAqBJ,EAAIa,QAC5BV,QAAQC,IAAI,YAAcU,KAAKC,UAAUf,I,SAEtBA,EAAIC,O,cAAnBC,E,OACJC,QAAQC,IAAI,YAAYF,G,kBACjBA,G,kCAEPC,QAAQC,IAAI,wBAAwB,EAAxB,I,iCAGT,M,yHCzDMY,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,MAAO,aACtB,EAAKC,OAHY,E,oMAOSzB,EAAS0B,IAAI,yB,OAAjCC,E,OAEAC,EAAUT,KAAKU,MAAMF,GAC3BG,KAAKC,SAAS,CAAEP,MAAM,GAAD,OAAKI,EAAQI,OAAb,a,mIAIrB,OACE,yBAAKC,UAAU,OACZH,KAAKP,MAAMC,MAAQM,KAAKP,MAAMC,MAAQ,iB,GAjBdU,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC,iB","file":"static/js/main.794f8ef2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class HTTPUtil {\r\n\tstatic async get(url) {\r\n\t\ttry {\r\n\t\t\tlet res = await fetch(url, {\r\n\t\t\t\tmethod: 'GET',\r\n\t            headers: {\r\n\t            \t'Accept': 'application/json',\r\n\t                'Content-Type': 'application/json',\r\n\t            }\r\n\t\t\t});\r\n\r\n\t\t\tlet result = await res.text();\r\n\t\t\tconsole.log(\"get data=\"+result);\r\n\t\t\treturn result;\r\n\t    } catch (err) {\r\n            console.log(\"HTTPUtil.get: error=\"+err);\r\n\t    }\r\n\r\n\t    return null;\r\n\t}\r\n\r\n\tstatic asyncPost(url, formData, callback) {\r\n\t\tfetch(url,{\r\n            method: 'POST',\r\n            body: formData,\r\n            mode: 'no-cors',\r\n            // headers: {\r\n            //     'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\r\n            // },\r\n        }).then((response) => {\r\n        \treturn response.text();\r\n        }).then((text) => {\r\n        \tcallback(text);\r\n        }).catch((e) => {\r\n        \tconsole.log(\"error=\"+e);\r\n        });\r\n\t}\r\n\r\n\tstatic async post(url, formData) {\r\n        try {\r\n            let res = await fetch(url, {\r\n                method: 'POST',\r\n                body: formData,\r\n                mode: 'no-cors',\r\n                // headers: {\r\n                //     'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\r\n                // },\r\n            });\r\n\r\n\t\t\tconsole.log('response status:' + res.status);\r\n            console.log('response:' + JSON.stringify(res));\r\n\r\n            let result = await res.text();\r\n            console.log(\"get data=\"+result);\r\n            return result;\r\n        } catch (err) {\r\n            console.log(\"HTTPUtil.post: error=\"+err);\r\n        }\r\n\r\n        return null;\r\n\t}\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport HTTPUtil from './util/HTTPUtil';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { title: 'Blog Test' };\n    this.test();\n  }\n\n  async test() {\n    const jsonContent = await HTTPUtil.get(\"/json/first-blog.json\");\n\n    const blogObj = JSON.parse(jsonContent);\n    this.setState({ title: `${blogObj.author}'s Blog` });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.title ? this.state.title : 'Blog Test'}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}